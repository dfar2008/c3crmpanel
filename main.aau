import win.ui;
import fsys;
import fsys.ini;
import win.util.tray;
import win.image;
import win.ui.menu;
import process;
import win.ui.atom;
import droson;
import win.ui.statusbar;
import thread.event;
import config;
import string.base64;

//io.open();
/*DSG{{*/
mainForm = ..win.form( text="易客CRM控制面板";parent=...;bottom=287;max=false;right=558;border="dialog frame" )
mainForm.add( 
buttonExplorer={ flat=1;bottom=44;text="显示文件";left=330;top=16;z=13;right=390;cls="button" };
groupbox4={ bottom=253;text="启动服务";left=10;top=111;z=1;right=309;edge=1;cls="groupbox" };
buttonTaskPlanStop={ bottom=146;text="停止";left=410;top=121;z=9;right=467;cls="button" };
buttonPhpMyAdamin={ flat=1;bottom=44;right=542;left=482;top=16;z=25;text="数据库";cls="button" };
buttonMysqlAtPort3306={ bottom=242;text="运行3306";left=126;top=218;z=23;right=204;cls="button" };
buttonTaskPlanStart={ bottom=146;text="开始";left=346;top=121;z=7;right=403;cls="button" };
buttonBackupConfig={ bottom=242;text="设置";left=472;top=217;z=20;right=529;cls="button" };
picturebox={ z=12;bottom=93;right=300;left=17;autosize=1;top=19;transparent=1;image=$"\res\banner.gif";notify=1;cls="picturebox" };
groupbox={ bottom=165;text="任务计划";left=329;top=90;z=3;right=544;edge=1;cls="groupbox" };
buttonBackupStop={ bottom=242;right=465;left=408;top=217;z=16;text="停止";cls="button" };
buttonService={ flat=1;bottom=80;text="本地服务";left=406;top=52;z=10;right=466;cls="button" };
buttonExit={ flat=1;bottom=80;right=390;left=330;top=52;z=26;text="退出程序";cls="button" };
static1={ bottom=182;right=103;left=63;text="Apache";top=166;z=4;transparent=1;cls="static" };
buttonTask={ bottom=146;text="设置";left=474;top=121;z=11;right=531;cls="button" };
buttonApacheAtPort80={ bottom=187;text="运行80";left=127;top=163;z=21;right=205;cls="button" };
buttonBackupStart={ bottom=242;right=401;left=344;top=217;z=15;text="开始";cls="button" };
buttonMysqlAtPort3308={ bottom=242;text="运行3308";left=213;top=218;z=24;right=291;cls="button" };
static2={ notify=1;text="Mysql";left=64;top=222;transparent=1;bottom=238;right=96;z=5;cls="static" };
buttonApacheAtPort88={ bottom=187;text="运行88";left=214;top=163;z=22;right=292;cls="button" };
checkboxMysqlService={ top=222;z=19;bottom=241;right=41;left=21;cls="checkbox" };
buttonLogin={ flat=1;bottom=44;text="登录界面";left=406;top=16;z=17;right=466;cls="button" };
checkboxApacheService={ top=167;z=18;bottom=183;right=41;left=24;cls="checkbox" };
MysqlPoint={ bottom=234;right=59;left=43;top=224;image=$"\res\1.bmp";z=8;border=1;cls="picturebox" };
ApachePoint={ bottom=179;right=60;left=44;top=169;image=$"\res\1.bmp";z=6;border=1;cls="picturebox" };
buttonSupport={ flat=1;bottom=80;text="官方支持";left=482;top=52;z=14;right=542;cls="button" };
groupbox2={ bottom=253;text="备份还原";left=330;top=180;z=2;right=544;edge=1;cls="groupbox" }
)
/*}}*/

global.onError= function( e ){ 
	var base64 = string.base64.encode(e);
 	win.msgbox("程序遇到了错误"+ '\r\n'+"您可以按CTRL+C 来把错误代码复制给我们"+ '\r\n'+"再点击下面的""确定""按钮，谢谢。"+ '\r\n' +base64,"错误")
	return true;  
}

var atom,hwnd= mainForm.atom("yikecrm");
if(!atom){
	/*为窗口设置原子值可以避免一个程序重复运行多个实例*/
	win.quitMessage();	return;
}

/*启动时检查{{*/
//检测EXE是否运行在X:\xampp这样的文件夹下面
if(!droson.PathDetection()){
	win.msgboxErr("请检查是否符合以下条件" + '\n' + "1: xampp文件夹放置在硬盘的根目录下"+'\n'+"2: 软件放置在xampp文件夹下运行。", droson.mfr);
	return false; 
}
var mysqlDirIni = droson.CurrentPath + "Mysql\bin\my.cnf";		//MYSQL设置文件
if( ! io.exist(mysqlDirIni) ){
	win.msgbox("服务器文件不完整!",droson.mfr);
	return false;
}

var httpdConf = droson.CurrentPath + "Apache\conf\httpd.conf";		//服务器设置文件
if( ! io.exist(httpdConf) ){
	win.msgbox("服务器文件不完整!",droson.mfr);
	return false;
}
droson.checkDriveInCRMConfig();// 检查CRM CONFIG 文件中的 盘符
droson.checkDriveInMysqlConfig();// 检查MYSQL Mysql\bin\my.cnf 文件中的 盘符
/*}}*/
 
/*建立快捷方式{{*/
import fsys.lnk;
lnk = fsys.lnk(); 
lnk.description = "易客CRM专用控制面板"  
lnk.path = io._exepath; //设置目标路径

lnk.setIcon(io._exepath,0); //设置图标
lnk.save(
	fsys.joinpath( 
		fsys.getSpecial(0x0007 /*_CSIDL_STARTUP*/ )
		,"易客CRM专用控制面板.lnk" 
		)
) 
/*}}*/

/*初始化设置{{*/
aName = "Apache";
mName = "MySql";
sop = {};

var evtTaskPlan = thread.event("定时事件 GUID:32DA0FC7-A96D-4850-9A28-DA1DD4464B44",false)
var evtTaskBackup = thread.event("定时事件 GUID:8FCCD783-00B9-4AE0-90A5-EB41B7FA430E",false)

thread.set("TaskPlanFlag", true )
thread.set("BackupFlag", true )
thread.set("BackupTime",config.backup.backuptime)

droson.initDatabase();
/*}}*/


win.ui.statusbar(mainForm).addItem("上海瑞策软件",80/*宽度*/)
mainForm.statusbar.addItem("", 270);
mainForm.statusbar.addItem("", 157);

task_plan = function(ms){
	import win;
	import droson;
	import thread.event;
	import sqlite.aes128;
 	
	//query("update task set status='启用'  where  url='"+winform.listview.getItemText( winform.listview.selIndex,2)+"'");
	import thread.manage
	
	manage = thread.manage(10)

	var sqlConn = sqlite("/data.db",droson.key) 
	
	DownloadPage = function(url,gap,note){
		import inet.whttp;
		import sqlite.aes128;
		import droson;
		
		setNextProcessingTime = function(url,gap){
			io.print("setNextProcessingTime")
			var sqlConn = sqlite.aes128("/data.db",key) 
			sqlConn.busy_timeout(10000)
			URLActivity = sqlConn.getTable("select url,following_processing_time from task where  url='"+ url +"' limit 1");
			if(#URLActivity){
				..io.print(tostring(URLActivity[1]["following_processing_time"]));
				var following_processing_time = ..time(,"%Y-%m-%d %H:%M:%S").addsecond(gap);
 	
    			sqlConn.busy_timeout(10000);	
				try{
					thread.lock("write");
					var command = sqlConn.prepare("update task SET following_processing_time=@following_processing_time where url=@url; ")
					command.bind.parameterByNamesAt(
						following_processing_time = following_processing_time;
						url =  url;
					)
					command.step(); 
					command.finalize() 
 				}
				thread.unlock("write");
	//			sqlConn.exec("update task SET following_processing_time='"+ tostring(following_processing_time) +"' where url='" + url + "';" )   			
			}
			sqlConn.close();
		}
			
		io.print("works",time(),url,note,gap);
		setNextProcessingTime(url,gap);
		try{
			var http = inet.whttp();
			html = http.get("http://localhost:" + droson.getApachePort() + "/" + url);
			http.close();		
		//	string.save("D:\"+note+tostring(time(,"%H%M%S"))+".html", html);			
		}

		return "返回值,线程ID" + thread.getId();		
	}
			
	var evt = thread.event("定时事件 GUID:32DA0FC7-A96D-4850-9A28-DA1DD4464B44")
 
	while(thread.get("TaskPlanFlag")){ 
		io.print(tostring(time()),"执行一次")
		for url,note,gap in sqlConn.each("SELECT url,note,gap FROM task WHERE status='启用' AND following_processing_time<datetime('now','localtime')") {
		//	io.print(thread.get("TaskPlanFlag"),url,note,gap)
			manage.create(DownloadPage,url,gap,note)
 			
			if(!thread.get("TaskPlanFlag")){ 
				break ;
			}
			sleep(1)
		}
		sleep(900)
	}
	io.print("任务已完成");
	sqlConn.close();
	return true; 
}

task_backup = function(ms){
	import win;
	import win.ui;
	import droson;
	import config;
	import thread.event;
	
	backupRoot = function(){
		import droson;
		import win.ui;
		import win;
		import inet.ftp;
		import config;
		import fsys.file;
		
		var FtpAddress = config.ftp.FtpAddress;
		var FtpPort = config.ftp.FtpPort;
		var ftpUserName = config.ftp.FtpUserName;
		var ftpPassword = config.ftp.FtpPassword;
		io.print("准备备份")
		try{
			var FileName  = droson.backupDatabase();
			var FullPath = config.backup.TargetFolder + "\" +  FileName +".sql";
			var TargetPath = "/" + config.ftp.FtpFolder +"/" +  FileName +".sql";
			io.print("SQL FullPath",FullPath);
			io.print("SQL TargetPath",TargetPath);
			if(config.ftp.FtpAddress){
				io.print("SQL 文件的FTP 功能");
				var gfile = fsys.file( FullPath );
				var FileSize = gfile.size("0x100000");//MB 单位的大小
				gfile.close() 
 				if( FileSize > tonumber(config.ftp.FtpSizeLimit) ){
 					io.print("SQL 文件超过尺寸，放弃上传")
 				}else {
 					io.print("SQL 准备上传");
 					ftp = inet.ftp(FtpAddress,ftpUserName,ftpPassword, FtpPort);
					var status,err  = ftp.upload(FullPath,TargetPath,1/*_INTERNET_FLAG_TRANSFER_ASCII*/)   
					io.print("SQL 上传结果",status,err)
					io.print("准备删除文件")
					ftp.delete(  "/" + config.ftp.FtpFolder +"/" + droson.SqlFilePrefix + tostring(time(,"%Y%m%d").addday(-7))+".sql");
					ftp.close();
 				}
			}
		} //var status,err  = ftp.upload(FullPath, TargetPath, 2/*_INTERNET_FLAG_TRANSFER_BINARY*/)   
		io.print("准备备份文件")
		try{
			var FileName = droson.backupRoot();
			var FullPath = config.backup.TargetFolder + "\" +  FileName +".zip";
			var TargetPath = "/" + config.ftp.FtpFolder +"/" +  FileName +".zip";
			if(config.ftp.FtpAddress and config.ftp.HtdocsUploaded="是"){
				io.print("ZIP 文件的FTP 功能");
				var gfile = fsys.file( FullPath );
				var FileSize = gfile.size("0x100000");//MB 单位的大小
				gfile.close() 
 				if( FileSize > tonumber(config.ftp.FtpSizeLimit) ){
 					io.print("ZIP 文件超过尺寸，放弃上传")
 				}else {
 					io.print("ZIP 准备上传");
					io.print("SQL FullPath",FullPath);
					io.print("SQL TargetPath",TargetPath);
 					ftp = inet.ftp(FtpAddress,ftpUserName,ftpPassword, FtpPort);
					var status,err  = ftp.upload(FullPath, TargetPath, 2/*_INTERNET_FLAG_TRANSFER_BINARY*/) //RAR 类的文件需要以二进制的形式上传。
					io.print("ZIP 上传结果",status,err);
					io.print("准备删除文件")
					ftp.delete(  "/" + config.ftp.FtpFolder +"/" + droson.ZipFilePrefix + tostring(time(,"%Y%m%d").addday(-7))+".zip");					
					ftp.close();
 				}
			}
		}
		return true; 
	}
	
	var evt = thread.event("定时事件 GUID:8FCCD783-00B9-4AE0-90A5-EB41B7FA430E")
	while(thread.get("BackupFlag")){ 
		io.print("当前时间",tostring(time(,"%H:%M:%S")),"备份时间", thread.get("BackupTime"))
		if( tostring(time(,"%H:%M:%S")) = thread.get("BackupTime")){
			thread.create(backupRoot);
		}  
		sleep(1000)
	}
	io.print("任务已完成");
	return true; 
}



mainForm.buttonTaskPlanStart.oncommand = function(id,event){
	config.default.start = "Y";
	config.saveAll();
	mainForm.buttonTaskPlanStart.disabled = true;
	mainForm.buttonTaskPlanStop.disabled = false;	
	thread.set("TaskPlanFlag", true )
	hTaskPlanThread = thread.create(task_plan);
//	thread.waitOne(hTaskPlanThread)
//	mainForm.buttonTaskPlanStart.disabled = false;
//	mainForm.buttonTaskPlanStop.disabled = true;		
}

mainForm.buttonTaskPlanStop.oncommand = function(id,event){
	mainForm.buttonTaskPlanStart.disabled = false;
	mainForm.buttonTaskPlanStop.disabled = true;
	config.default.start = "N";
	config.saveAll();
	thread.set("TaskPlanFlag", false )
	evtTaskPlan.set();//使事件对象切换为有信号状态,使wait函数退出
}

mainForm.buttonBackupStart.oncommand = function(id,event){
	if(!config.backup.backuptime){
		win.msgbox("请先设置再备份",droson.mfr);
		return false; 
	}
	config.backup.start= "Y";
	config.saveAll();
	mainForm.buttonBackupStart.disabled = true;
	mainForm.buttonBackupStop.disabled = false;
	thread.set("BackupFlag", true)
	hBackupThread = thread.create(task_backup);
}

mainForm.buttonBackupStop.oncommand = function(id,event){
	config.backup.start= "N";
	config.saveAll();
	mainForm.buttonBackupStart.disabled = false;
	mainForm.buttonBackupStop.disabled = true;		
	thread.set("BackupFlag",false )
	evtTaskBackup.set();//使事件对象切换为有信号状态,使wait函数退出
}

/*一些简单按钮{{*/
mainForm.buttonBackupConfig.oncommand = function(id,event){
	var child,wb = mainForm.loadForm("\res\backup.aau",mainForm /*指定父窗口*/ );
	child.doModal(mainForm);
}

mainForm.buttonTask.oncommand = function(id,event){
	var child,wb = mainForm.loadForm("\res\task.aau",mainForm /*指定父窗口*/ );
	child.doModal(mainForm);
}
 
mainForm.buttonPhpMyAdamin.oncommand = function(id,event){
	process.execute("http://localhost:" + droson.getApachePort()+"/phpmyadmin/");	
}

mainForm.buttonLogin.oncommand = function(id,event){
	process.execute("http://localhost:" + droson.getApachePort());
}

mainForm.buttonService.oncommand = function(id,event){
	process.execute("services.msc");
}
 
mainForm.picturebox.oncommand = function(id,event){
	process.execute(droson.website);
}

mainForm.buttonSupport.oncommand = function(id,event){
	process.execute(droson.website);
}

mainForm.buttonExplorer.oncommand = function(id,event){
	process.explore(droson.CurrentPath + "htdocs\");
}
/*}}*/

/*系统API{{*/
Advapi32 = raw.loadDll("Advapi32.dll");
//打SC系统服务管理信息
OpenSCManager = Advapi32.api("OpenSCManagerA", "pointer(string lpMachineName, string lpDatabaseName, INT dwDesiredAccess)");
//关闭系统服务句柄
CloseServiceHandle = Advapi32.api("CloseServiceHandle", "int(pointer hSCObject)"); 
//打开系统服务
OpenService = Advapi32.api("OpenServiceA", "pointer(pointer hSCManager, string lpServiceName, INT dwDesiredAccess)");
//创建系统服务
CreateService = Advapi32.api("CreateServiceA", "pointer(pointer hSCManager, string lpServiceName, string lpDisplayName, INT dwDesiredAccess, INT dwServiceType, INT dwStartType, INT dwErrorControl, string lpBinaryPathName, string lpLoadOrderGroup, INT lpdwTagId, string lpDependencies, string lpServiceStartName, string lpPassword)");
//启动系统服务
StartService = Advapi32.api("StartServiceA", "int(pointer hService, INT dwNumServiceArgs, string lpServiceArgVectors)");
//改变系统服务描述
ChangeServiceConfig2 = Advapi32.api("ChangeServiceConfig2A","int(pointer hService, INT dwInfoLevel, struct lpInfo)");
//停止系统服务
ControlService = Advapi32.api("ControlService", "int(pointer hService, INT dwControl, struct& lpServiceStatus)");
//删除系统服务
DeleteService = Advapi32.api("DeleteService", "int(pointer hService)");
//查询系统服务器状态
QueryServiceStatus = Advapi32.api("QueryServiceStatusEx", "INT(pointer hService, INT InfoLevel, struct& lpBuffer, INT cbBufSize, INT& pcbBytesNeeded)");

SERVICE_STATUS_PROCESS = class {
	INT dwServiceType;
	INT dwCurrentState;
	INT dwControlsAccepted;
	INT dwWin32ExitCode;
	INT dwServiceSpecificExitCode;
	INT dwCheckPoint;
	INT dwWaitHint;
	INT dwProcessId;
	INT dwServiceFlags;
}
SERVICE_STATUS = class {
	INT dwServiceType;
	INT dwCurrentState;
	INT dwControlsAccepted;
	INT dwWin32ExitCode;
	INT dwServiceSpecificExitCode;
	INT dwCheckPoint;
	INT dwWaitHint;
}
SERVICE_DESCRIPTION = class {
	//服务描述
	string lpDescription = "www.c3crm.cn";
}
serSTATUS = SERVICE_STATUS();
mainSerSTATUS = serSTATUS;
/*}}*/

/*系统服务{{*/
//创建一个新的系统服务 serInstall(服务名, 描述, 启动文件路径)
serInstall = function(serNAME, serDESCRIPTION, serPARAMETER){
	var hSCManager = OpenSCManager(, , 0x2/*_SC_MANAGER_CREATE_SERVICE*/);
	if (hSCManager) {
		var hService = CreateService(
			hSCManager,
			serNAME, serNAME,
			0x10/*_SERVICE_START*/, 0x10/*_SERVICE_WIN32_OWN_PROCESS*/, 0x2/*_SERVICE_AUTO_START*/, 0x0/*_SERVICE_ERROR_IGNORE*/,
			serPARAMETER, , 0
		);
		if (hService) {
			StartService(hService, 0);
			CloseServiceHandle(hService);
			var nService = OpenService(hSCManager, serNAME, 0x2/*_SERVICE_CHANGE_CONFIG*/);
			var lpInfo = SERVICE_DESCRIPTION();
			lpInfo.lpDescription = serDESCRIPTION;
			ChangeServiceConfig2(nService, 0x1/*_SERVICE_CONFIG_DESCRIPTION*/, lpInfo);
			CloseServiceHandle(nService);
			CloseServiceHandle(hSCManager);
			return true; 
		}
		CloseServiceHandle(hService);
		
	}else {
		io.print("Error: hSCManager 获取失败")
	}
	
	CloseServiceHandle(hSCManager);
	return false; 
}
///////////////////////////////////////////
//删除系统服务 serUnInstall(服务名)
serUnInstall = function (serNAME) {
	var hSCManager = OpenSCManager(, , 0x2/*_SC_MANAGER_CREATE_SERVICE*/);
	if (hSCManager) {
		var hService = OpenService(hSCManager, serNAME, 0x10000/*_DELETE*/ | 0x20/*_SERVICE_STOP*/);
		if (hService) {
			ControlService(hService, 0x1/*_SERVICE_CONTROL_STOP*/, mainSerSTATUS);
			DeleteService(hService);
			CloseServiceHandle(hService);
		} else {
			io.print("Error: hService 获取失败")
		}
		CloseServiceHandle(hSCManager);
	} else {
		io.print("Error: hSCManager 获取失败")
	}
}

///////////////////////////////////////////
//查询服务状态 serStatus(服务名)
serStatus = function(serName){
	var out = 255;
	var hSCManager = OpenSCManager(, , 0x1/*_SC_MANAGER_CONNECT*/);
	if (hSCManager) {
		var fService = OpenService(hSCManager, serName, 0x4/*_SERVICE_QUERY_STATUS*/);
		CloseServiceHandle(hSCManager);
		if(fService){
			var s,Buffer,pbn  = QueryServiceStatus(fService, 0x0/*_SC_STATUS_PROCESS_INFO*/,SERVICE_STATUS_PROCESS(), 36, 0);

			out = Buffer.dwCurrentState;
			//io.print(Buffer.dwCurrentState==0x1/*_SERVICE_STOPPED*/);
		}
		CloseServiceHandle(fService);
	}
	CloseServiceHandle(hSCManager);
	sop[serName] = out;
	return out;
}

///////////////////////////////////////////
//启动服务 serRun(服务名)
serRun = function(serName){
	var hSCManager = OpenSCManager(, , 0x2/*_SC_MANAGER_CREATE_SERVICE*/);
	if (hSCManager) {
		var hService = OpenService(hSCManager, serName, 0x10/*_SERVICE_START*/);
		CloseServiceHandle(hSCManager);
		if (hService) {
			StartService(hService, 0);
			CloseServiceHandle(hService);
			return true; 
		}
		CloseServiceHandle(hService);
	}
	CloseServiceHandle(hSCManager);
	return false; 
}

///////////////////////////////////////////
//停止服务 serStop(服务名)
serStop = function(serName){
	var hSCManager = OpenSCManager(, , 0x2/*_SC_MANAGER_CREATE_SERVICE*/);
	if (hSCManager) {
		var hService = OpenService(hSCManager, serName, 0x20/*_SERVICE_STOP*/);
		CloseServiceHandle(hSCManager);
		if (hService) {
			ControlService(hService, 0x1/*_SERVICE_CONTROL_STOP*/, mainSerSTATUS);
			CloseServiceHandle(hService);
			return true; 
		}
		CloseServiceHandle(hService);
	}
	CloseServiceHandle(hSCManager);
	return false; 
}


/////////////////////////////////////////////
//设置UI服务器显示状态图标
setPoint = function(h, status){
	if(status == 255){
		h.image=$"\res\1.bmp"
		return 1; 
	}elseif(status == 0x4/*_SERVICE_RUNNING*/){
		h.image=$"\res\2.bmp"
		return 2;
	}else {
		h.image=$"\res\3.bmp"
		return 3;
	}
}


/////////////////////////////////////////////
//启动
StartRun = function(serName, serDon, serVice){
	
	var isApache = serStatus(serName);
	if(isApache == 255){
		serInstall(serName, serDon, serVice)
		win.delay(100);
        for( i=1; 80; 1){
        	win.delay(200);
        	isApache = serStatus(serName);
        	io.print("启动中",serName, i,serDon, serVice)
            if( isApache==0x4/*_SERVICE_RUNNING*/){
            	break;
            }
        }
	}elseif(isApache==0x1/*_SERVICE_STOPPED*/){
		serRun(serName);
        for( i=1; 80; 1){
        	win.delay(200);
        	isApache = serStatus(serName);
        	io.print("启动中",serName, i,serDon, serVice)
            if( isApache==0x4/*_SERVICE_RUNNING*/){
            	break;
            }
        }
	}
	return isApache; 	
}

/////////////////////////////////////////////
//删除
StartDel = function(serName){
	var isApache = serStatus(serName);
	if(isApache != 255){
		serUnInstall(serName);
        for( i=1; 120; 1){
        	win.delay(200);
        	io.print("删除中",i)
        	isApache = serStatus(serName);
            if( isApache==255){
            	break;
            }
        }
	}
	return isApache;
}

/////////////////////////////////////////////
//停止
StartStop = function(serName){
	var isApache = serStatus(serName);
	if( isApache == 0x4/*_SERVICE_RUNNING*/ ){
		serStop(serName)
        for(i=1;30; 1){
        	io.print("停止中",serName,i);
        	win.delay(200);
        	isApache = serStatus(serName);
            if( isApache == 0x1/*_SERVICE_STOPPED*/ ){
            	break;
            }
        }
	}
	return isApache;
}

/*}}*/


/*系统托盘{{*/
trayIcon = { win.image.loadIconFromFile("\res\logo.ico");			};
tray = win.util.tray(mainForm.hwnd,trayIcon[1]) //创建托盘图标
tray.message = 0x400+9981/*_WM_TRAYMESSAGE*/
tray.tip = "" //设置鼠标提示 
/*}}*/


 

mainForm.popmenu = win.ui.popmenu(mainForm);//创建弹出菜单

mainForm.popmenu.add("隐藏",function(id){
    //在下面输入菜单响应代码
    stat = win.isVisible(mainForm.hwnd);
    if(stat){
        mainForm.show(false);
        mainForm.popmenu.setString(1,"显示");
    }else {
        mainForm.show(true);
        mainForm.popmenu.setString(1,"隐藏");
    }
});
mainForm.popmenu.add();
mainForm.popmenu.add('退出',function(id){
	thread.set("TaskPlanFlag", false )
	thread.set("BackupFlag",false )
	evtTaskPlan.set();//使事件对象切换为有信号状态,使wait函数退出
	evtTaskBackup.set();
	mainForm.close();
	win.quitMessage();
	tray.delete();
})

mainForm.buttonExit.oncommand = function(id,event){
	thread.set("TaskPlanFlag", false )
	thread.set("BackupFlag",false )
	evtTaskPlan.set();//使事件对象切换为有信号状态,使wait函数退出
	evtTaskBackup.set();
 	win.quitMessage();
//	mainForm.close();
	tray.delete();	
}

mainForm.wndproc = function(hwnd,message,wparam,lparam){
    select(message) {//判断消息类型
        case( 0x400+9981/*_WM_TRAYMESSAGE*/ ) { //托盘图标消息
           if( lparam = 0x205/*_WM_RBUTTONUP*/ ){
                    import mouse;
                    x,y = mouse.getPos();
                    //弹出托盘菜单以前，一定要前置主窗口中，不然不点击菜单不会消失
                    win.setForeground(mainForm.hwnd);
                    mainForm.popmenu.popup( x,y,true );
            }
           if(lparam = 0x203/*_WM_LBUTTONDBLCLK)*/){  //鼠标双击
               mainForm.show(true);
            }

        } 
        case( 0x112/*_WM_SYSCOMMAND*/ ){
            if( wparam == 0xF020/*_SC_MINIMIZE*/ ){ //用户点击了最小化按钮
                mainForm.show(false); //隐藏窗口
                return true;
            } 
        }
  		case 0x10{/*_WM_CLOSE窗口关闭消息*/
                mainForm.show(false); //隐藏窗口
                return true;
        }        
     }
}
/*}}*/

/*系统服务{{*/
var status = serStatus(aName);
setPoint(mainForm.ApachePoint, status);
if(status == 255){//任务不存在
	mainForm.checkboxApacheService.checked = false;
	mainForm.buttonApacheAtPort80.text ="运行80";
	mainForm.buttonApacheAtPort88.text ="运行88";
}elseif(status == 0x4/*_SERVICE_RUNNING*/){
	mainForm.checkboxApacheService.checked = true;
	mainForm.buttonApacheAtPort80.text ="停止";
	mainForm.buttonApacheAtPort88.text ="停止";
}else {
	mainForm.checkboxApacheService.checked = true;
	mainForm.buttonApacheAtPort80.text ="运行80";
	mainForm.buttonApacheAtPort88.text ="运行88";
}
var status = serStatus(mName);
setPoint(mainForm.MysqlPoint, status);
if(status == 255){//任务不存在
	mainForm.checkboxMysqlService.checked = false;
	mainForm.buttonMysqlAtPort3306.text ="运行3306";
	mainForm.buttonMysqlAtPort3308.text ="运行3308";
}elseif(status == 0x4/*_SERVICE_RUNNING*/){
	mainForm.checkboxMysqlService.checked = true;
	mainForm.buttonMysqlAtPort3306.text ="停止";
	mainForm.buttonMysqlAtPort3308.text ="停止";
}else {
	mainForm.checkboxMysqlService.checked = true;
	mainForm.buttonMysqlAtPort3306.text ="运行3306";
	mainForm.buttonMysqlAtPort3308.text ="运行3308";
} 

mainForm.buttonMysqlAtPort3308.oncommand = function(id,event){
 	if(mainForm.buttonMysqlAtPort3308.text ="停止"){
 		mainForm.buttonMysqlAtPort3306.disabled = true;
 		mainForm.buttonMysqlAtPort3308.disabled = true;
 		mainForm.buttonMysqlAtPort3308.text ="正在停止.."
 		var status = StartStop(mName);
 		setPoint(mainForm.MysqlPoint, status);
 		mainForm.buttonMysqlAtPort3306.disabled = false;
 		mainForm.buttonMysqlAtPort3308.disabled = false;
		if(status == 255){//任务不存在
			mainForm.checkboxMysqlService.checked = false;
			mainForm.buttonMysqlAtPort3306.text ="运行3306";
			mainForm.buttonMysqlAtPort3308.text ="运行3308";
		}elseif(status == 0x4/*_SERVICE_RUNNING*/){
			mainForm.checkboxMysqlService.checked = true;
			mainForm.buttonMysqlAtPort3306.text ="停止";
			mainForm.buttonMysqlAtPort3308.text ="停止";
		}else {
			mainForm.checkboxMysqlService.checked = true;
			mainForm.buttonMysqlAtPort3306.text ="运行3306";
			mainForm.buttonMysqlAtPort3308.text ="运行3308";
		} 		
	}else {
		if(droson.getMysqlPort()!="3308"){
			droson.setMysqlPort("3308")
		}
		if(droson.getMysqlPortInCRMConfig()!="3308"){
			droson.setMysqlPortInCRMConfig("3308")
		}
		if(droson.getMysqlPortInPhpMyAdminConfig()!="3308"){
			droson.setMysqlPortInPhpMyAdminConfig("3308")
		}		
		mainForm.buttonMysqlAtPort3306.disabled = true;
		mainForm.buttonMysqlAtPort3308.disabled = true;
		mainForm.buttonMysqlAtPort3308.text ="正在启动.."
		var status = StartRun(mName, "MySQL",droson.CurrentPath + "mysql\bin\mysqld.exe --defaults-file=" + droson.getDrive() + ":\xampp\mysql\bin\my.cnf mysql");
		io.print(status)
		setPoint(mainForm.MysqlPoint, status);
		mainForm.buttonMysqlAtPort3306.disabled = false;
		mainForm.buttonMysqlAtPort3308.disabled = false;
		if(status == 255){//任务不存在
			mainForm.checkboxMysqlService.checked = false;
			mainForm.buttonMysqlAtPort3306.text ="运行3306";
			mainForm.buttonMysqlAtPort3308.text ="运行3308";
		}elseif(status == 0x4/*_SERVICE_RUNNING*/){
			mainForm.checkboxMysqlService.checked = true;
			mainForm.buttonMysqlAtPort3306.text ="停止";
			mainForm.buttonMysqlAtPort3308.text ="停止";
		}else {
			mainForm.checkboxMysqlService.checked = true;
			mainForm.buttonMysqlAtPort3306.text ="运行3306";
			mainForm.buttonMysqlAtPort3308.text ="运行3308";
		}
	}
}

mainForm.buttonMysqlAtPort3306.oncommand = function(id,event){
 	if(mainForm.buttonMysqlAtPort3306.text ="停止"){
 		mainForm.buttonMysqlAtPort3306.disabled = true;
 		mainForm.buttonMysqlAtPort3308.disabled = true;
 		mainForm.buttonMysqlAtPort3306.text ="正在停止.."
 		var status = StartStop(mName);
 		setPoint(mainForm.MysqlPoint, status);
 		mainForm.buttonMysqlAtPort3306.disabled = false;
 		mainForm.buttonMysqlAtPort3308.disabled = false;
		if(status == 255){//任务不存在
			mainForm.checkboxMysqlService.checked = false;
			mainForm.buttonMysqlAtPort3306.text ="运行3306";
			mainForm.buttonMysqlAtPort3308.text ="运行3308";
		}elseif(status == 0x4/*_SERVICE_RUNNING*/){
			mainForm.checkboxMysqlService.checked = true;
			mainForm.buttonMysqlAtPort3306.text ="停止";
			mainForm.buttonMysqlAtPort3308.text ="停止";
		}else {
			mainForm.checkboxMysqlService.checked = true;
			mainForm.buttonMysqlAtPort3306.text ="运行3306";
			mainForm.buttonMysqlAtPort3308.text ="运行3308";
		} 		
	}else {
		if(droson.getMysqlPort()!="3306"){
			droson.setMysqlPort("3306")
		}	
		if(droson.getMysqlPortInCRMConfig()!="3306"){
			droson.setMysqlPortInCRMConfig("3306")
		}
		if(droson.getMysqlPortInPhpMyAdminConfig()!="3306"){
			droson.setMysqlPortInPhpMyAdminConfig("3306")
		}		
		mainForm.buttonMysqlAtPort3306.disabled = true;
		mainForm.buttonMysqlAtPort3308.disabled = true;
		mainForm.buttonMysqlAtPort3306.text ="正在启动.."
		var status = StartRun(mName, "MySQL",droson.CurrentPath + "mysql\bin\mysqld.exe --defaults-file=" + droson.getDrive() + ":\xampp\mysql\bin\my.cnf mysql");
		io.print(status)
		setPoint(mainForm.MysqlPoint, status);
		mainForm.buttonMysqlAtPort3306.disabled = false;
		mainForm.buttonMysqlAtPort3308.disabled = false;
		if(status == 255){//任务不存在
			mainForm.checkboxMysqlService.checked = false;
			mainForm.buttonMysqlAtPort3306.text ="运行3306";
			mainForm.buttonMysqlAtPort3308.text ="运行3308";
		}elseif(status == 0x4/*_SERVICE_RUNNING*/){
			mainForm.checkboxMysqlService.checked = true;
			mainForm.buttonMysqlAtPort3306.text ="停止";
			mainForm.buttonMysqlAtPort3308.text ="停止";
		}else {
			mainForm.checkboxMysqlService.checked = true;
			mainForm.buttonMysqlAtPort3306.text ="运行3306";
			mainForm.buttonMysqlAtPort3308.text ="运行3308";
		}
	}		 
}

mainForm.buttonApacheAtPort88.oncommand = function(id,event){
 	if(mainForm.buttonApacheAtPort88.text ="停止"){
 		mainForm.buttonApacheAtPort80.disabled = true;
 		mainForm.buttonApacheAtPort88.disabled = true;
 		mainForm.buttonApacheAtPort88.text ="正在停止.."
 		var status = StartStop(aName);
 		setPoint(mainForm.ApachePoint, status);
 		mainForm.buttonApacheAtPort80.disabled = false;
 		mainForm.buttonApacheAtPort88.disabled = false;
		if(status == 255){//任务不存在
			mainForm.checkboxApacheService.checked = false;
			mainForm.buttonApacheAtPort80.text ="运行80";
			mainForm.buttonApacheAtPort88.text ="运行88";
		}elseif(status == 0x4/*_SERVICE_RUNNING*/){
			mainForm.checkboxApacheService.checked = true;
			mainForm.buttonApacheAtPort80.text ="停止";
			mainForm.buttonApacheAtPort88.text ="停止";
		}else {
			mainForm.checkboxApacheService.checked = true;
			mainForm.buttonApacheAtPort80.text ="运行80";
			mainForm.buttonApacheAtPort88.text ="运行88";
		} 		
	}else {
		if(droson.getApachePort()!="88"){
			droson.setApachePort("88")
		}
		if(droson.getSiteUrlPortInCRMConfig()!="88"){
			droson.setSiteUrlPortInCRMConfig("88");
		}				
		mainForm.buttonApacheAtPort80.disabled = true;
		mainForm.buttonApacheAtPort88.disabled = true;
		mainForm.buttonApacheAtPort88.text ="正在启动.."
		var status = StartRun(aName, "Apache",droson.CurrentPath + "Apache\bin\httpd.exe -k runservice");
		io.print(status)
		setPoint(mainForm.ApachePoint, status);
		mainForm.buttonApacheAtPort80.disabled = false;
		mainForm.buttonApacheAtPort88.disabled = false;
		if(status == 255){//任务不存在
			mainForm.checkboxApacheService.checked = false;
			mainForm.buttonApacheAtPort80.text ="运行80";
			mainForm.buttonApacheAtPort88.text ="运行88";
		}elseif(status == 0x4/*_SERVICE_RUNNING*/){
			mainForm.checkboxApacheService.checked = true;
			mainForm.buttonApacheAtPort80.text ="停止";
			mainForm.buttonApacheAtPort88.text ="停止";
		}else {
			mainForm.checkboxApacheService.checked = true;
			mainForm.buttonApacheAtPort80.text ="运行80";
			mainForm.buttonApacheAtPort88.text ="运行88";
		}
	}		
}

mainForm.buttonApacheAtPort80.oncommand = function(id,event){
 	if(mainForm.buttonApacheAtPort80.text ="停止"){
 		mainForm.buttonApacheAtPort80.disabled = true;
 		mainForm.buttonApacheAtPort88.disabled = true;
 		mainForm.buttonApacheAtPort80.text ="正在停止.."
 		var status = StartStop(aName);
 		setPoint(mainForm.ApachePoint, status);
 		mainForm.buttonApacheAtPort80.disabled = false;
 		mainForm.buttonApacheAtPort88.disabled = false;
		if(status == 255){//任务不存在
			mainForm.checkboxApacheService.checked = false;
			mainForm.buttonApacheAtPort80.text ="运行80";
			mainForm.buttonApacheAtPort88.text ="运行88";
		}elseif(status == 0x4/*_SERVICE_RUNNING*/){
			mainForm.checkboxApacheService.checked = true;
			mainForm.buttonApacheAtPort80.text ="停止";
			mainForm.buttonApacheAtPort88.text ="停止";
		}else {
			mainForm.checkboxApacheService.checked = true;
			mainForm.buttonApacheAtPort80.text ="运行80";
			mainForm.buttonApacheAtPort88.text ="运行88";
		} 		
	}else {
		if(droson.getApachePort()!="80"){
			droson.setApachePort("80")
		}
		if(droson.getSiteUrlPortInCRMConfig()!="80"){
			droson.setSiteUrlPortInCRMConfig("80");
		}	
		mainForm.buttonApacheAtPort80.disabled = true;
		mainForm.buttonApacheAtPort88.disabled = true;
		mainForm.buttonApacheAtPort80.text ="正在启动.."
		var status = StartRun(aName, "Apache",droson.CurrentPath + "Apache\bin\httpd.exe -k runservice");
		io.print(status)
		setPoint(mainForm.ApachePoint, status);
		mainForm.buttonApacheAtPort80.disabled = false;
		mainForm.buttonApacheAtPort88.disabled = false;
		if(status == 255){//任务不存在
			mainForm.checkboxApacheService.checked = false;
			mainForm.buttonApacheAtPort80.text ="运行80";
			mainForm.buttonApacheAtPort88.text ="运行88";
		}elseif(status == 0x4/*_SERVICE_RUNNING*/){
			mainForm.checkboxApacheService.checked = true;
			mainForm.buttonApacheAtPort80.text ="停止";
			mainForm.buttonApacheAtPort88.text ="停止";
		}else {
			mainForm.checkboxApacheService.checked = true;
			mainForm.buttonApacheAtPort80.text ="运行80";
			mainForm.buttonApacheAtPort88.text ="运行88";
		}
	}		
}


mainForm.checkboxMysqlService.oncommand = function(id,event){
	if(mainForm.checkboxMysqlService.checked){
		var reply = win.msgboxTest("是否需要安装Mysql系统服务？",droson.mfr)
		if(!reply){
			mainForm.checkboxMysqlService.checked = false;
			return false; 
		}	
		mainForm.buttonMysqlAtPort3306.disabled = true;
		mainForm.buttonMysqlAtPort3308.disabled = true;
		mainForm.buttonMysqlAtPort3306.text ="正在启动.."
		mainForm.buttonMysqlAtPort3308.text ="正在启动.."
		var status = StartRun(mName, "MySQL",droson.CurrentPath + "mysql\bin\mysqld.exe --defaults-file=" + droson.getDrive() + ":\xampp\mysql\bin\my.cnf mysql");
		io.print(status)
		setPoint(mainForm.MysqlPoint, status);
		mainForm.buttonMysqlAtPort3306.disabled = false;
		mainForm.buttonMysqlAtPort3308.disabled = false;
		if(status == 255){//任务不存在
			mainForm.checkboxMysqlService.checked = false;
			mainForm.buttonMysqlAtPort3306.text ="运行3306";
			mainForm.buttonMysqlAtPort3308.text ="运行3308";
		}elseif(status == 0x4/*_SERVICE_RUNNING*/){
			mainForm.checkboxMysqlService.checked = true;
			mainForm.buttonMysqlAtPort3306.text ="停止";
			mainForm.buttonMysqlAtPort3308.text ="停止";
		}else {
			mainForm.checkboxMysqlService.checked = true;
			mainForm.buttonMysqlAtPort3306.text ="运行3306";
			mainForm.buttonMysqlAtPort3308.text ="运行3308";
		}	
	}else {
		var reply = win.msgboxTest("是否需要卸载Mysql系统服务？",droson.mfr)
		if(!reply){
			mainForm.checkboxMysqlService.checked = true;
			return false; 
		}	
 		mainForm.buttonMysqlAtPort3306.disabled = true;
 		mainForm.buttonMysqlAtPort3308.disabled = true;
 		mainForm.buttonMysqlAtPort3306.text ="正在终止.."
 		mainForm.buttonMysqlAtPort3308.text ="正在终止.."
 		var status = StartDel(mName);
 		setPoint(mainForm.MysqlPoint, status);
 		mainForm.buttonMysqlAtPort3306.disabled = false;
 		mainForm.buttonMysqlAtPort3308.disabled = false;
		if(status == 255){//任务不存在
			mainForm.checkboxMysqlService.checked = false;
			mainForm.buttonMysqlAtPort3306.text ="运行3306";
			mainForm.buttonMysqlAtPort3308.text ="运行3308";
		}elseif(status == 0x4/*_SERVICE_RUNNING*/){
			mainForm.checkboxMysqlService.checked = true;
			mainForm.buttonMysqlAtPort3306.text ="停止";
			mainForm.buttonMysqlAtPort3308.text ="停止";
		}else {
			mainForm.checkboxMysqlService.checked = true;
			mainForm.buttonMysqlAtPort3306.text ="运行3306";
			mainForm.buttonMysqlAtPort3308.text ="运行3308";
		} 	
	}
}

mainForm.checkboxApacheService.oncommand = function(id,event){
	if(mainForm.checkboxApacheService.checked){
		var reply = win.msgboxTest("是否需要安装Apache系统服务？",droson.mfr)
		if(!reply){
			mainForm.checkboxApacheService.checked = false;
			return false; 
		}
		mainForm.buttonApacheAtPort80.disabled = true;
		mainForm.buttonApacheAtPort88.disabled = true;
		mainForm.buttonApacheAtPort80.text ="正在启动.."
		mainForm.buttonApacheAtPort88.text ="正在启动.."
		var status = StartRun(aName, "Apache",droson.CurrentPath + "Apache\bin\httpd.exe -k runservice");
		io.print(status)
		setPoint(mainForm.ApachePoint, status);
		mainForm.buttonApacheAtPort80.disabled = false;
		mainForm.buttonApacheAtPort88.disabled = false;
		if(status == 255){//任务不存在
			mainForm.checkboxApacheService.checked = false;
			mainForm.buttonApacheAtPort80.text ="运行80";
			mainForm.buttonApacheAtPort88.text ="运行88";
		}elseif(status == 0x4/*_SERVICE_RUNNING*/){
			mainForm.checkboxApacheService.checked = true;
			mainForm.buttonApacheAtPort80.text ="停止";
			mainForm.buttonApacheAtPort88.text ="停止";
		}else {
			mainForm.checkboxApacheService.checked = true;
			mainForm.buttonApacheAtPort80.text ="运行80";
			mainForm.buttonApacheAtPort88.text ="运行88";
		}
	}else {
		var reply = win.msgboxTest("是否需要卸载Apache系统服务？",droson.mfr)
		if(!reply){
			mainForm.checkboxApacheService.checked = true;
			return false; 
		}
 		mainForm.buttonApacheAtPort80.disabled = true;
 		mainForm.buttonApacheAtPort88.disabled = true;
 		mainForm.buttonApacheAtPort80.text ="正在终止.."
 		mainForm.buttonApacheAtPort88.text ="正在终止.."
 		var status = StartDel(aName);
 		setPoint(mainForm.ApachePoint, status);
 		mainForm.buttonApacheAtPort80.disabled = false;
 		mainForm.buttonApacheAtPort88.disabled = false;
		if(status == 255){//任务不存在
			mainForm.checkboxApacheService.checked = false;
			mainForm.buttonApacheAtPort80.text ="运行80";
			mainForm.buttonApacheAtPort88.text ="运行88";
		}elseif(status == 0x4/*_SERVICE_RUNNING*/){
			mainForm.checkboxApacheService.checked = true;
			mainForm.buttonApacheAtPort80.text ="停止";
			mainForm.buttonApacheAtPort88.text ="停止";
		}else {
			mainForm.checkboxApacheService.checked = true;
			mainForm.buttonApacheAtPort80.text ="运行80";
			mainForm.buttonApacheAtPort88.text ="运行88";
		} 
	}
}
/*}}*/


mainForm.show();

win.delay(1000);
if(config.default.start = "Y"){
	io.print(config.default.start);
	mainForm.buttonTaskPlanStart.oncommand();
}

if(config.backup.start = "Y"){
	io.print(config.backup.start);
	mainForm.buttonBackupStart.oncommand();
}

win.loopMessage();
